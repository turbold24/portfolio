{"version":3,"sources":["webpack:///./src/pages/archive.js"],"names":["colors","fonts","fontSizes","theme","StyledMainContainer","styled","Main","withConfig","displayName","componentId","StyledTitleContainer","header","media","tablet","_templateObject","_taggedTemplateLiteralLoose","StyledTitle","h1","desktop","_templateObject2","_templateObject3","phablet","_templateObject4","phone","_templateObject5","StyledSubtitle","p","green","md","SFMono","_templateObject6","sm","_templateObject7","smish","StyledTableContainer","div","_templateObject8","StyledTable","table","_templateObject9","transition","lightNavy","_templateObject10","_templateObject11","lightestSlate","xl","lg","xs","mixins","flexBetween","ArchivePage","_ref","location","data","projects","edges","revealTitle","useRef","revealTable","revealProjects","useEffect","sr","reveal","current","srConfig","forEach","ref","i","React","createElement","Layout","Helmet","rel","href","length","className","map","_ref2","node","date","github","external","title","tech","company","frontmatter","key","el","Date","getFullYear","item","target","aria-label","IconGitHub","IconExternal"],"mappings":"iPAUA,MAAM,OAAEA,EAAM,MAAEC,EAAK,UAAEC,GAAcC,IAE/BC,EAAsBC,YAAOC,KAAKC,WAAA,CAAAC,YAAA,+BAAAC,YAAA,eAAZJ,CAAY,oDAKlCK,EAAuBL,IAAOM,OAAMJ,WAAA,CAAAC,YAAA,gCAAAC,YAAA,eAAbJ,CAAa,0BAEtCO,IAAMC,OAAMC,MAAAC,YAAA,qCAIVC,EAAcX,IAAOY,GAAEV,WAAA,CAAAC,YAAA,uBAAAC,YAAA,eAATJ,CAAS,6DAIzBO,IAAMM,QAAOC,MAAAJ,YAAA,wBACbH,IAAMC,OAAMO,MAAAL,YAAA,wBACZH,IAAMS,QAAOC,MAAAP,YAAA,wBACbH,IAAMW,MAAKC,MAAAT,YAAA,yBAETU,EAAiBpB,IAAOqB,EAACnB,WAAA,CAAAC,YAAA,0BAAAC,YAAA,eAARJ,CAAQ,4FACpBL,EAAO2B,MAEHzB,EAAU0B,GACR3B,EAAM4B,OAEnBjB,IAAMM,QAAOY,MAAAf,YAAA,sBAAcb,EAAU6B,IACrCnB,IAAMC,OAAMmB,MAAAjB,YAAA,sBAAcb,EAAU+B,QAElCC,EAAuB7B,IAAO8B,IAAG5B,WAAA,CAAAC,YAAA,gCAAAC,YAAA,eAAVJ,CAAU,4BAEnCO,IAAMC,OAAMuB,MAAArB,YAAA,uCAIVsB,EAAchC,IAAOiC,MAAK/B,WAAA,CAAAC,YAAA,uBAAAC,YAAA,eAAZJ,CAAY,0cAK1BO,IAAMC,OAAM0B,MAAAxB,YAAA,oCAMAZ,IAAMqC,WAIExC,EAAOyC,UAQ3B7B,IAAMC,OAAM6B,MAAA3B,YAAA,oCAUVH,IAAMC,OAAM8B,MAAA5B,YAAA,wCACCb,EAAU6B,IAKhB/B,EAAO4C,cACH1C,EAAU2C,GAMV3C,EAAU4C,GAGV5C,EAAU6C,GACR9C,EAAM4B,OAIjBmB,IAAOC,aAoHFC,UAvGKC,IAAyB,IAAxB,SAAEC,EAAQ,KAAEC,GAAMF,EACrC,MAAMG,EAAWD,EAAKC,SAASC,MAEzBC,EAAcC,iBAAO,MACrBC,EAAcD,iBAAO,MACrBE,EAAiBF,iBAAO,IAO9B,OANAG,oBAAU,KACRC,IAAGC,OAAON,EAAYO,QAASC,sBAC/BH,IAAGC,OAAOJ,EAAYK,QAASC,sBAC/BL,EAAeI,QAAQE,QAAQ,CAACC,EAAKC,IAAMN,IAAGC,OAAOI,EAAKF,mBAAa,GAAJG,MAClE,IAGDC,IAAAC,cAACC,IAAM,CAAClB,SAAUA,GAChBgB,IAAAC,cAACE,SAAM,KACLH,IAAAC,cAAA,aAAO,0BACPD,IAAAC,cAAA,QAAMG,IAAI,YAAYC,KAAK,gCAG7BL,IAAAC,cAACjE,EAAmB,KAClBgE,IAAAC,cAAC3D,EAAoB,CAACwD,IAAKV,GACzBY,IAAAC,cAACrD,EAAW,KAAC,WACboD,IAAAC,cAAC5C,EAAc,KAAC,2BACW6B,EAASoB,OAAO,sBAI7CN,IAAAC,cAACnC,EAAoB,CAACgC,IAAKR,GACzBU,IAAAC,cAAChC,EAAW,KACV+B,IAAAC,cAAA,aACED,IAAAC,cAAA,UACED,IAAAC,cAAA,UAAI,QACJD,IAAAC,cAAA,UAAI,SACJD,IAAAC,cAAA,MAAIM,UAAU,kBAAiB,WAC/BP,IAAAC,cAAA,MAAIM,UAAU,kBAAiB,cAC/BP,IAAAC,cAAA,UAAI,UAGRD,IAAAC,cAAA,aACGf,EAASoB,OAAS,GACjBpB,EAASsB,IAAI,CAAAC,EAAWV,KAAO,IAAjB,KAAEW,GAAMD,EACpB,MAAM,KAAEE,EAAI,OAAEC,EAAM,SAAEC,EAAQ,MAAEC,EAAK,KAAEC,EAAI,QAAEC,GAAYN,EAAKO,YAC9D,OACEjB,IAAAC,cAAA,MAAIiB,IAAKnB,EAAGD,IAAKqB,GAAO5B,EAAeI,QAAQI,GAAKoB,GAClDnB,IAAAC,cAAA,MAAIM,UAAU,iBAAe,GAAK,IAAIa,KAAKT,GAAMU,eAEjDrB,IAAAC,cAAA,MAAIM,UAAU,SAASO,GAEvBd,IAAAC,cAAA,MAAIM,UAAU,0BACXS,EAAUhB,IAAAC,cAAA,YAAOe,GAAkBhB,IAAAC,cAAA,YAAM,MAG5CD,IAAAC,cAAA,MAAIM,UAAU,uBACXQ,EAAKT,OAAS,GACbS,EAAKP,IAAI,CAACc,EAAMvB,IACdC,IAAAC,cAAA,QAAMiB,IAAKnB,GACTC,IAAAC,cAAA,QAAMiB,IAAKnB,GAAIuB,GACdvB,IAAMgB,EAAKT,OAAS,GAAKN,IAAAC,cAAA,YAAM,UAKxCD,IAAAC,cAAA,MAAIM,UAAU,SACZP,IAAAC,cAAA,YACGW,EACCZ,IAAAC,cAAA,KACEI,KAAMO,EACNW,OAAO,SACPnB,IAAI,+BACJoB,aAAW,eACXxB,IAAAC,cAACwB,IAAU,OAGbzB,IAAAC,cAAA,QAAMuB,aAAW,SAAQ,KAE1BX,EACCb,IAAAC,cAAA,KACEI,KAAMQ,EACNU,OAAO,SACPnB,IAAI,+BACJoB,aAAW,iBACXxB,IAAAC,cAACyB,IAAY,OAGf1B,IAAAC,cAAA,QAAMuB,aAAW,SAAQ","file":"component---src-pages-archive-js-efde350b897d3f673bdb.js","sourcesContent":["import React, { useRef, useEffect } from 'react';\nimport { graphql } from 'gatsby';\nimport { Helmet } from 'react-helmet';\nimport PropTypes from 'prop-types';\nimport sr from '@utils/sr';\nimport { srConfig } from '@config';\nimport { Layout } from '@components';\nimport { IconGitHub, IconExternal } from '@components/icons';\nimport styled from 'styled-components';\nimport { theme, mixins, media, Main } from '@styles';\nconst { colors, fonts, fontSizes } = theme;\n\nconst StyledMainContainer = styled(Main)`\n  min-height: 100vh;\n  height: 100%;\n  max-width: 1600px;\n`;\nconst StyledTitleContainer = styled.header`\n  margin-top: 200px;\n  ${media.tablet`\n    margin-top: 150px;\n  `};\n`;\nconst StyledTitle = styled.h1`\n  font-size: 80px;\n  line-height: 1.1;\n  margin: 0;\n  ${media.desktop`font-size: 70px;`};\n  ${media.tablet`font-size: 60px;`};\n  ${media.phablet`font-size: 50px;`};\n  ${media.phone`font-size: 40px;`};\n`;\nconst StyledSubtitle = styled.p`\n  color: ${colors.green};\n  margin: 0 0 20px 3px;\n  font-size: ${fontSizes.md};\n  font-family: ${fonts.SFMono};\n  font-weight: normal;\n  ${media.desktop`font-size: ${fontSizes.sm};`};\n  ${media.tablet`font-size: ${fontSizes.smish};`};\n`;\nconst StyledTableContainer = styled.div`\n  margin: 100px -20px;\n  ${media.tablet`\n    margin: 100px -10px;\n  `};\n`;\nconst StyledTable = styled.table`\n  width: 100%;\n  border-collapse: collapse;\n\n  .hide-on-mobile {\n    ${media.tablet`\n      display: none;\n    `};\n  }\n\n  tbody tr {\n    transition: ${theme.transition};\n\n    &:hover,\n    &:focus {\n      background-color: ${colors.lightNavy};\n    }\n  }\n  th,\n  td {\n    cursor: default;\n    line-height: 1.5;\n    padding: 10px 20px;\n    ${media.tablet`\n      padding: 10px;\n    `};\n  }\n  th {\n    text-align: left;\n  }\n  td {\n    &.year {\n      width: 10%;\n      ${media.tablet`\n        font-size: ${fontSizes.sm};\n      `};\n    }\n    &.title {\n      padding-top: 15px;\n      color: ${colors.lightestSlate};\n      font-size: ${fontSizes.xl};\n      font-weight: 700;\n    }\n    &.company {\n      width: 15%;\n      padding-top: 15px;\n      font-size: ${fontSizes.lg};\n    }\n    &.tech {\n      font-size: ${fontSizes.xs};\n      font-family: ${fonts.SFMono};\n    }\n    &.links {\n      span {\n        ${mixins.flexBetween};\n        a + a {\n          margin-left: 10px;\n        }\n        svg {\n          width: 20px;\n          height: 20px;\n        }\n      }\n    }\n  }\n`;\n\nconst ArchivePage = ({ location, data }) => {\n  const projects = data.projects.edges;\n\n  const revealTitle = useRef(null);\n  const revealTable = useRef(null);\n  const revealProjects = useRef([]);\n  useEffect(() => {\n    sr.reveal(revealTitle.current, srConfig());\n    sr.reveal(revealTable.current, srConfig());\n    revealProjects.current.forEach((ref, i) => sr.reveal(ref, srConfig(i * 10)));\n  }, []);\n\n  return (\n    <Layout location={location}>\n      <Helmet>\n        <title>Archive | Turbold Amar</title>\n        <link rel=\"canonical\" href=\"https://turbold.me/archive\" />\n      </Helmet>\n\n      <StyledMainContainer>\n        <StyledTitleContainer ref={revealTitle}>\n          <StyledTitle>Archive</StyledTitle>\n          <StyledSubtitle>\n            A big list of projects ({projects.length}) I’ve worked on.\n          </StyledSubtitle>\n        </StyledTitleContainer>\n\n        <StyledTableContainer ref={revealTable}>\n          <StyledTable>\n            <thead>\n              <tr>\n                <th>Year</th>\n                <th>Title</th>\n                <th className=\"hide-on-mobile\">Made at</th>\n                <th className=\"hide-on-mobile\">Built with</th>\n                <th>Link</th>\n              </tr>\n            </thead>\n            <tbody>\n              {projects.length > 0 &&\n                projects.map(({ node }, i) => {\n                  const { date, github, external, title, tech, company } = node.frontmatter;\n                  return (\n                    <tr key={i} ref={el => (revealProjects.current[i] = el)}>\n                      <td className=\"overline year\">{`${new Date(date).getFullYear()}`}</td>\n\n                      <td className=\"title\">{title}</td>\n\n                      <td className=\"company hide-on-mobile\">\n                        {company ? <span>{company}</span> : <span>—</span>}\n                      </td>\n\n                      <td className=\"tech hide-on-mobile\">\n                        {tech.length > 0 &&\n                          tech.map((item, i) => (\n                            <span key={i}>\n                              <span key={i}>{item}</span>\n                              {i !== tech.length - 1 && <span>&nbsp;&middot;&nbsp;</span>}\n                            </span>\n                          ))}\n                      </td>\n\n                      <td className=\"links\">\n                        <span>\n                          {github ? (\n                            <a\n                              href={github}\n                              target=\"_blank\"\n                              rel=\"nofollow noopener noreferrer\"\n                              aria-label=\"GitHub Link\">\n                              <IconGitHub />\n                            </a>\n                          ) : (\n                            <span aria-label=\"Empty\">—</span>\n                          )}\n                          {external ? (\n                            <a\n                              href={external}\n                              target=\"_blank\"\n                              rel=\"nofollow noopener noreferrer\"\n                              aria-label=\"External Link\">\n                              <IconExternal />\n                            </a>\n                          ) : (\n                            <span aria-label=\"Empty\">—</span>\n                          )}\n                        </span>\n                      </td>\n                    </tr>\n                  );\n                })}\n            </tbody>\n          </StyledTable>\n        </StyledTableContainer>\n      </StyledMainContainer>\n    </Layout>\n  );\n};\nArchivePage.propTypes = {\n  location: PropTypes.object.isRequired,\n  data: PropTypes.object.isRequired,\n};\n\nexport default ArchivePage;\n\nexport const pageQuery = graphql`\n  {\n    projects: allMarkdownRemark(\n      filter: { fileAbsolutePath: { regex: \"/projects/\" } }\n      sort: { fields: [frontmatter___date], order: DESC }\n    ) {\n      edges {\n        node {\n          frontmatter {\n            date\n            title\n            tech\n            github\n            external\n            company\n            show\n          }\n          html\n        }\n      }\n    }\n  }\n`;\n"],"sourceRoot":""}